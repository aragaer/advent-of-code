(load "common.scm")

(define bot-regex "pos=<(-?\\d+),(-?\\d+),(-?\\d+)>, r=(\\d+)")

(define *bots* (map (compose list (p string->number) (match bot-regex)) (read-lines)))

(define (dist-between pos1 pos2)
  (fold + 0 (map (compose abs -) (take pos1 3) (take pos2 3))))

(define ((in-range-of? bot1) bot2)
  (>= (fourth bot1) (dist-between bot1 bot2)))

(let ((strongest (fold (lambda (bot1 bot2)
                         (if (> (fourth bot1) (fourth bot2))
                             bot1 bot2))
                       (first *bots*) (cdr *bots*))))
  (print (fold (lambda (bot count)
                 (if ((in-range-of? strongest) bot)
                     (+ 1 count)
                     count))
               0 *bots*)))

(define (bot-touches-box xyz size bot)
  (i< (dist-between xyz bot) (+ size (fourth bot))))

(loop for mx = (reduce min 0 (map first *bots*)) then (- (first best) dist)
      for Mx = (reduce max 0 (map first *bots*)) then (+ (first best) dist)
      for my = (reduce min 0 (map second *bots*)) then (- (second best) dist)
      for My = (reduce max 0 (map second *bots*)) then (+ (second best) dist)
      for mz = (reduce min 0 (map third *bots*)) then (- (third best) dist)
      for Mz = (reduce max 0 (map third *bots*)) then (+ (third best) dist)
      with md = (reduce max 0 (map - (list Mx My Mz) (list mx my mz)))
      for dist = md then (ceiling (/ dist 2))
      for target_count = 0
      with best = '(0 0 0)
      with best_val = 0
      do (for-each (lambda (xyz)
                     (let ((cnt (fold (lambda (bot s)
                                        (+ s (bot-touches-box xyz dist bot)))
                                      0 *bots*)))
                      (if (= cnt target_count)
                           (let ((d (reduce + 0 (map abs xyz))))
                             (when (< d best_val)
                               (set! best xyz)
                               (set! best_val d)))
                           (when (> cnt target_count)
                             (set! target_count cnt)
                             (set! best xyz)
                             (set! best_val (reduce + 0 (map abs best)))))))
                   (cartesian-product (range mx (+ 1 Mx) dist)
                                      (range my (+ 1 My) dist)
                                      (range mz (+ 1 Mz) dist)))
      until (= 1 dist)
      finally (print best_val))
